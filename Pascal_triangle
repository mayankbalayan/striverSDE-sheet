leetcode link :- https://leetcode.com/problems/pascals-triangle/description/
IN interview they ask 
1. given row and coloum and find the value at that place in a pascal triangle
formula for it R-1 C C-1
#include <iostream>
#include <vector>
using namespace std;
int ncr(int n, int r){
    long long res = 1;
    for(int i =0; i<r; i++){
        res = res * (n-i);
        res = res/(i+1);
    }
    return res;
}

int main(){
    int row;
    cin >> row;
    int col;
    cin >> col;
    cout << "element at the pascal " << ncr(row-1,col-1);

}

time complexity = O(r)
space complexity = O(1)

2. print any given row of the pascal triangle 
#include <iostream>
using namespace std;

void pascalTriangle(int n) {
    long long ans = 1;
    cout << ans << " "; // printing 1st element

    //Printing the rest of the part:
    for (int i = 1; i < n; i++) {
        ans = ans * (n - i);
        ans = ans / i;
        cout << ans << " ";
    }
    cout << endl;
}

int main()
{
    int n;
    cin>> n;
    pascalTriangle(n);
    return 0;
}

time complexity = O(N)
space complexity = O(1)

3.  given n and print whole pascal triangle 

#include <bits/stdc++.h>
using namespace std;

vector<int> generateRow(int row) {
    long long ans = 1;
    vector<int> ansRow;
    ansRow.push_back(1); //inserting the 1st element

    //calculate the rest of the elements:
    for (int col = 1; col < row; col++) {
        ans = ans * (row - col);
        ans = ans / col;
        ansRow.push_back(ans);
    }
    return ansRow;
}

vector<vector<int>> pascalTriangle(int n) {
    vector<vector<int>> ans;

    //store the entire pascal's triangle:
    for (int row = 1; row <= n; row++) {
        ans.push_back(generateRow(row));
    }
    return ans;
}

int main()
{
    int n = 5;
    vector<vector<int>> ans = pascalTriangle(n);
    for (auto it : ans) {
        for (auto ele : it) {
            cout << ele << " ";
        }
        cout << "n";
    }
    return 0;
}
time complexity = O(N^2)
space complexity = O(1)
